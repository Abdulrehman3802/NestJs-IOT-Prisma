import { PrismaService } from "../prisma/prisma.service";
import { UpdateUserDto } from "./dto/request/update-user.dto";
import { ModelUserDto } from "./dto/request/create-user.dto";
export declare class UserRepository {
    private readonly prismaService;
    constructor(prismaService: PrismaService);
    createUser(model: ModelUserDto): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }>;
    findUser(id: number): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }>;
    findUserByEmail(email: string): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }>;
    findUserByToken(token: string): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }>;
    findAllUser(): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }[]>;
    deleteUser(id: number): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }>;
    updateUser(id: number, body: UpdateUserDto): Promise<{
        userid: number;
        firstname: string;
        lastname: string;
        email: string;
        address: string;
        passwordhash: string;
        phonenumber: string;
        createdby: number;
        updatedby: number;
        is_active: boolean;
        is_deleted: boolean;
        date_created: Date;
        date_updated: Date;
        resettoken: string;
    }>;
}
