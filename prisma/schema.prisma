generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alertnotifications {
  notificationid         Int       @id @default(autoincrement())
  staffid                Int
  deviceid               Int
  thresholdminvalue      Float
  thresholdmaxvalue      Float
  notificationtime       DateTime  @db.Time(6)
  lastacknowledgmenttime DateTime? @db.Timestamptz(6)
  escalationlevel        Int
  devices                devices   @relation(fields: [deviceid], references: [deviceid], onDelete: NoAction, onUpdate: NoAction)
  staff                  staff     @relation(fields: [staffid], references: [staffid], onDelete: NoAction, onUpdate: NoAction)
}

model customers {
  customerid                        Int                 @id @default(autoincrement())
  customername                      String              @db.VarChar(100)
  contactperson                     String              @db.VarChar(100)
  email                             String              @db.VarChar(100)
  phone                             String              @db.VarChar(20)
  address                           String              @db.VarChar(100)
  city                              String              @db.VarChar(100)
  is_active                         Boolean?            @default(true)
  date_created                      DateTime?           @default(now()) @db.Timestamp(6)
  date_updated                      DateTime?           @default(now()) @db.Timestamp(6)
  is_deleted                        Boolean?            @default(false)
  created_by                        Int
  updated_by                        Int
  users_customers_created_byTousers users               @relation("customers_created_byTousers", fields: [created_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "customers_createdby_fkey")
  users_customers_updated_byTousers users               @relation("customers_updated_byTousers", fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "customers_updatedby_fkey")
  departments                       departments[]
  devices                           devices[]
  facilities                        facilities[]
  gateways                          gateways[]
  organizationusers                 organizationusers[]
  sensors                           sensors[]
}

model departments {
  departmentid                        Int               @id @default(autoincrement())
  departmentname                      String            @db.VarChar(100)
  customerid                          Int
  location                            String?           @db.VarChar(255)
  is_active                           Boolean?          @default(true)
  date_created                        DateTime          @default(now()) @db.Timestamp(6)
  date_updated                        DateTime?         @default(now()) @db.Timestamp(6)
  is_deleted                          Boolean?          @default(false)
  facilityid                          Int
  created_by                          Int
  updated_by                          Int
  email                               String            @db.VarChar(100)
  users_departments_created_byTousers users             @relation("departments_created_byTousers", fields: [created_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "departments_createdby_fkey")
  customers                           customers         @relation(fields: [customerid], references: [customerid], onDelete: NoAction, onUpdate: NoAction)
  facilities                          facilities        @relation(fields: [facilityid], references: [facilityid], onDelete: NoAction, onUpdate: NoAction)
  users_departments_updated_byTousers users             @relation("departments_updated_byTousers", fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "departments_updatedby_fkey")
  departmentusers                     departmentusers[]
  devices                             devices[]
  staff                               staff[]
}

model devices {
  deviceid                        Int                     @id @default(autoincrement())
  devicename                      String                  @db.VarChar(100)
  departmentid                    Int
  devicetype                      String?                 @db.VarChar(50)
  manufacturer                    String?                 @db.VarChar(100)
  is_active                       Boolean?                @default(true)
  date_created                    DateTime                @default(now()) @db.Timestamp(6)
  date_updated                    DateTime?               @default(now()) @db.Timestamp(6)
  is_deleted                      Boolean?                @default(false)
  facilityid                      Int
  customerid                      Int
  created_by                      Int
  updated_by                      Int
  alertnotifications              alertnotifications[]
  users_devices_created_byTousers users                   @relation("devices_created_byTousers", fields: [created_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "devices_createdby_fkey")
  customers                       customers               @relation(fields: [customerid], references: [customerid], onDelete: NoAction, onUpdate: NoAction)
  departments                     departments             @relation(fields: [departmentid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction)
  facilities                      facilities              @relation(fields: [facilityid], references: [facilityid], onDelete: NoAction, onUpdate: NoAction)
  users_devices_updated_byTousers users                   @relation("devices_updated_byTousers", fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "devices_updatedby_fkey")
  readings                        readings[]
  sensors                         sensors[]
  staffdeviceassignment           staffdeviceassignment[]
}

model escalationlevels {
  levelid          Int                @id @default(autoincrement())
  levelname        String?            @db.VarChar(50)
  description      String?
  escalationstatus escalationstatus[]
}

model gatewayfailures {
  failureid         Int       @id @default(autoincrement())
  gatewayid         Int?
  failuretimestamp  DateTime? @db.Timestamp(6)
  recoverytimestamp DateTime? @db.Timestamp(6)
  gateways          gateways? @relation(fields: [gatewayid], references: [gatewayid], onDelete: NoAction, onUpdate: NoAction)
}

model gateways {
  gatewayid                        Int                       @id @default(autoincrement())
  gatewayname                      String                    @db.VarChar(100)
  location                         String?                   @db.VarChar(255)
  customerid                       Int
  is_active                        Boolean?                  @default(true)
  date_created                     DateTime                  @db.Timestamp(6)
  date_updated                     DateTime?                 @db.Timestamp(6)
  is_deleted                       Boolean?                  @default(false)
  created_by                       Int
  updated_by                       Int
  gatewayfailures                  gatewayfailures[]
  users_gateways_created_byTousers users                     @relation("gateways_created_byTousers", fields: [created_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "gateways_createdby_fkey")
  customers                        customers                 @relation(fields: [customerid], references: [customerid], onDelete: NoAction, onUpdate: NoAction)
  users_gateways_updated_byTousers users                     @relation("gateways_updated_byTousers", fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "gateways_updatedby_fkey")
  readings                         readings[]
  sensorgatewayassignment          sensorgatewayassignment[]
}

model readings {
  readingid         Int      @id @default(autoincrement())
  sensorid          Int
  deviceid          Int
  gatewayid         Int
  measure           String   @db.VarChar(20)
  sensorvalue       Float
  reading_timestamp DateTime @db.Timestamptz(6)
  devices           devices  @relation(fields: [deviceid], references: [deviceid], onDelete: NoAction, onUpdate: NoAction)
  gateways          gateways @relation(fields: [gatewayid], references: [gatewayid], onDelete: NoAction, onUpdate: NoAction)
  sensors           sensors  @relation(fields: [sensorid], references: [sensorid], onDelete: NoAction, onUpdate: NoAction)
}

model roles {
  roleid          Int               @id @default(autoincrement())
  name            String?           @db.VarChar(255)
  normalizedname  String?           @db.VarChar(255)
  is_active       Boolean?          @default(true)
  is_deleted      Boolean?          @default(false)
  rolepermissions rolepermissions[]
  userroles       userroles[]
}

model sensors {
  sensorid                Int                       @id @default(autoincrement())
  deviceid                Int?
  is_active               Boolean?                  @default(true)
  customerid              Int?
  is_deleted              Boolean?                  @default(false)
  aws_sensorid            String                    @db.VarChar(50)
  date_created            DateTime?                 @default(now()) @db.Timestamp(6)
  date_updated            DateTime?                 @default(now()) @db.Timestamp(6)
  assigned_by             Int?
  alerts                  alerts[]
  readings                readings[]
  sensorgatewayassignment sensorgatewayassignment[]
  users                   users?                    @relation(fields: [assigned_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "sensors_assignedby_fkey")
  customers               customers?                @relation(fields: [customerid], references: [customerid], onDelete: NoAction, onUpdate: NoAction)
  devices                 devices?                  @relation(fields: [deviceid], references: [deviceid], onDelete: NoAction, onUpdate: NoAction)
  sensortypes             sensortypes[]
}

model sensortypes {
  sensortypeid    Int       @id @default(autoincrement())
  sensortypename  String?   @db.VarChar(255)
  measurementunit String?   @db.VarChar(50)
  minvalue        Decimal?  @db.Decimal(10, 2)
  maxvalue        Decimal?  @db.Decimal(10, 2)
  sensorid        Int
  aws_sensorid    String    @db.VarChar(50)
  is_hidden       Boolean?  @default(false)
  is_deleted      Boolean?  @default(false)
  date_created    DateTime? @default(now()) @db.Timestamp(6)
  date_updated    DateTime? @default(now()) @db.Timestamp(6)
  updated_by      Int
  sensors         sensors   @relation(fields: [sensorid], references: [sensorid], onDelete: NoAction, onUpdate: NoAction)
  users           users     @relation(fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "sensortypes_updatedby_fkey")
}

model staff {
  staffid                             Int                     @id @default(autoincrement())
  deviceid                            Int?
  name                                String                  @db.VarChar(100)
  email                               String?                 @db.VarChar(100)
  phone                               String?                 @db.VarChar(20)
  pager                               String?                 @db.VarChar(20)
  departmentid                        Int
  isdepartmenthead                    Boolean?                @default(false)
  is_active                           Boolean?                @default(true)
  notificationstarttime               DateTime?               @db.Time(6)
  notificationendtime                 DateTime?               @db.Time(6)
  weekdaysonly                        Boolean?                @default(false)
  date_created                        DateTime                @default(now()) @db.Timestamp(6)
  date_updated                        DateTime?               @default(now()) @db.Timestamp(6)
  created_by                          Int
  updated_by                          Int
  is_deleted                          Boolean?                @default(false)
  alertnotifications                  alertnotifications[]
  alerts_alerts_acknowledgedbyTostaff alerts[]                @relation("alerts_acknowledgedbyTostaff")
  alerts_alerts_escalatedtoTostaff    alerts[]                @relation("alerts_escalatedtoTostaff")
  escalationstatus                    escalationstatus[]
  users_staff_created_byTousers       users                   @relation("staff_created_byTousers", fields: [created_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "staff_createdby_fkey")
  departments                         departments             @relation(fields: [departmentid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction)
  users_staff_updated_byTousers       users                   @relation("staff_updated_byTousers", fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "staff_updatedby_fkey")
  staffdeviceassignment               staffdeviceassignment[]
}

model staffdeviceassignment {
  assignmentid Int      @id @default(autoincrement())
  staffid      Int?
  deviceid     Int?
  devices      devices? @relation(fields: [deviceid], references: [deviceid], onDelete: NoAction, onUpdate: NoAction)
  staff        staff?   @relation(fields: [staffid], references: [staffid], onDelete: NoAction, onUpdate: NoAction)
}

model alerts {
  alertid                            Int               @id @default(autoincrement())
  sensorid                           Int
  alerttype                          String            @db.VarChar(50)
  readingvalue                       Decimal           @db.Decimal(10, 2)
  timestamp                          DateTime?         @db.Timestamp(6)
  acknowledgedby                     Int?
  escalatedto                        Int?
  isgatewayfailurealert              Boolean?
  staff_alerts_acknowledgedbyTostaff staff?            @relation("alerts_acknowledgedbyTostaff", fields: [acknowledgedby], references: [staffid], onDelete: NoAction, onUpdate: NoAction)
  staff_alerts_escalatedtoTostaff    staff?            @relation("alerts_escalatedtoTostaff", fields: [escalatedto], references: [staffid], onDelete: NoAction, onUpdate: NoAction)
  sensors                            sensors           @relation(fields: [sensorid], references: [sensorid], onDelete: NoAction, onUpdate: NoAction)
  alertstatus                        alertstatus?
  escalationstatus                   escalationstatus?
}

model alertstatus {
  alertid         Int       @id @default(autoincrement())
  status          String?   @db.VarChar(50)
  statustimestamp DateTime? @db.Timestamp(6)
  alerts          alerts    @relation(fields: [alertid], references: [alertid], onDelete: NoAction, onUpdate: NoAction)
}

model escalationstatus {
  alertid                 Int               @id @default(autoincrement())
  levelid                 Int?
  staffid                 Int?
  lastescalationtimestamp DateTime?         @db.Timestamp(6)
  alerts                  alerts            @relation(fields: [alertid], references: [alertid], onDelete: NoAction, onUpdate: NoAction)
  escalationlevels        escalationlevels? @relation(fields: [levelid], references: [levelid], onDelete: NoAction, onUpdate: NoAction)
  staff                   staff?            @relation(fields: [staffid], references: [staffid], onDelete: NoAction, onUpdate: NoAction)
}

model facilities {
  facilityid                         Int             @id @default(autoincrement())
  name                               String?         @db.VarChar(255)
  location                           String?         @db.VarChar(255)
  address                            String?         @db.VarChar(255)
  contactname                        String?         @db.VarChar(255)
  contactphonenumber                 String?         @db.VarChar(255)
  email                              String?         @db.VarChar(255)
  isfacilityadmin                    Boolean?
  is_active                          Boolean?        @default(true)
  is_deleted                         Boolean?        @default(false)
  date_created                       DateTime?       @default(now()) @db.Timestamptz(6)
  date_updated                       DateTime?       @default(now()) @db.Timestamptz(6)
  customerid                         Int?
  created_by                         Int
  updated_by                         Int
  departments                        departments[]
  devices                            devices[]
  users_facilities_created_byTousers users           @relation("facilities_created_byTousers", fields: [created_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "facilities_createdby_fkey")
  customers                          customers?      @relation(fields: [customerid], references: [customerid], onDelete: NoAction, onUpdate: NoAction)
  users_facilities_updated_byTousers users           @relation("facilities_updated_byTousers", fields: [updated_by], references: [userid], onDelete: NoAction, onUpdate: NoAction, map: "facilities_updatedby_fkey")
  facilityusers                      facilityusers[]
}

model rolepermissions {
  rolepermissionid Int     @id @default(autoincrement())
  roleid           Int?
  permissiontype   String? @db.VarChar(255)
  permissionvalue  String? @db.VarChar(255)
  roles            roles?  @relation(fields: [roleid], references: [roleid], onDelete: NoAction, onUpdate: NoAction)
}

model sensorgatewayassignment {
  sensorid  Int      @default(autoincrement())
  gatewayid Int
  gateways  gateways @relation(fields: [gatewayid], references: [gatewayid], onDelete: NoAction, onUpdate: NoAction)
  sensors   sensors  @relation(fields: [sensorid], references: [sensorid], onDelete: NoAction, onUpdate: NoAction)

  @@id([sensorid, gatewayid])
}

model users {
  userid                                    Int                 @id @default(autoincrement())
  firstname                                 String?             @db.VarChar(255)
  lastname                                  String?             @db.VarChar(255)
  email                                     String?             @db.VarChar(255)
  address                                   String?             @db.VarChar(255)
  passwordhash                              String?             @db.VarChar(255)
  phonenumber                               String?             @db.VarChar(20)
  createdby                                 Int?
  updatedby                                 Int?
  is_active                                 Boolean?            @default(true)
  is_deleted                                Boolean?            @default(false)
  date_created                              DateTime?           @default(now()) @db.Timestamptz(6)
  date_updated                              DateTime?           @default(now()) @db.Timestamptz(6)
  resettoken                                String?             @db.VarChar(255)
  customers_customers_created_byTousers     customers[]         @relation("customers_created_byTousers")
  customers_customers_updated_byTousers     customers[]         @relation("customers_updated_byTousers")
  departments_departments_created_byTousers departments[]       @relation("departments_created_byTousers")
  departments_departments_updated_byTousers departments[]       @relation("departments_updated_byTousers")
  departmentusers                           departmentusers[]
  devices_devices_created_byTousers         devices[]           @relation("devices_created_byTousers")
  devices_devices_updated_byTousers         devices[]           @relation("devices_updated_byTousers")
  facilities_facilities_created_byTousers   facilities[]        @relation("facilities_created_byTousers")
  facilities_facilities_updated_byTousers   facilities[]        @relation("facilities_updated_byTousers")
  facilityusers                             facilityusers[]
  gateways_gateways_created_byTousers       gateways[]          @relation("gateways_created_byTousers")
  gateways_gateways_updated_byTousers       gateways[]          @relation("gateways_updated_byTousers")
  organizationusers                         organizationusers[]
  sensors                                   sensors[]
  sensortypes                               sensortypes[]
  staff_staff_created_byTousers             staff[]             @relation("staff_created_byTousers")
  staff_staff_updated_byTousers             staff[]             @relation("staff_updated_byTousers")
  userroles                                 userroles[]
}

model userroles {
  userroleid Int   @id @default(autoincrement())
  roleid     Int
  userid     Int
  roles      roles @relation(fields: [roleid], references: [roleid], onDelete: NoAction, onUpdate: NoAction)
  users      users @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model departmentusers {
  departmentuserid Int          @id @default(autoincrement())
  departmentid     Int?
  userid           Int?
  is_admin         Boolean?
  departments      departments? @relation(fields: [departmentid], references: [departmentid], onDelete: NoAction, onUpdate: NoAction)
  users            users?       @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model facilityusers {
  facilityuserid Int         @id @default(autoincrement())
  facilityid     Int?
  userid         Int?
  is_admin       Boolean?
  facilities     facilities? @relation(fields: [facilityid], references: [facilityid], onDelete: NoAction, onUpdate: NoAction)
  users          users?      @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model organizationusers {
  organizationuserid Int        @id @default(autoincrement())
  customerid         Int?
  userid             Int?
  is_admin           Boolean?
  customers          customers? @relation(fields: [customerid], references: [customerid], onDelete: NoAction, onUpdate: NoAction)
  users              users?     @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}
